pico-8 cartridge // http://www.pico-8.com
version 36
__lua__
--init


debug = true
onObject = false
draw_drummer = false
draw_bass = false
draw_guitar = false

pa1={}
pa1.val=0
pa1.sel=true
pa2={}
pa2.val=0
pa2.sel=false
pa3={}
pa3.val=0
pa3.sel=false
pa4={}
pa4.val=0
pa4.sel=false


dhx = 0
dhy = 0

dig_cursor ={}
dig_cursor.x = dhx
dig_cursor.y = dhy
initDig = true
curr_dig = 0
dig_nav_l = true
dig_nav_t = true

k_arrow_speed = .5
initArrow=true
arrow={}
arrow.x = 0
arrow.y=0
arrow.spd=k_arrow_speed
-- settings
-- player
spd=.7 -- Speed
digging = false
-- misc
tran_spd=0.1 -- how fast screen moves

-- game states
listen = false
acting=false

txt={}
txt.timer=-1
txt.t=""
_d=0

map_tile = 0
flag_tile = 0

mx,my=0,0
cx,cy=0,0


_time=time()

--det light
light ={}
light.timer=-1
light.interval = 1
light.sw=false

stam={}
stam.val=1
stam.timer=-1

dflag=true
--detgt = time()
function _init()
	main_pal()
   scene="menu"
   x=64
   y=64
end

function main_pal()
	pal()
	
	pal(3,0+128,1)
	pal(11,6+128,1)
	pal(10,5+128,1)
	pal(14,15+128,1)
end

-->8
--update
function _update60()
	
	
	
	move_pl()
	update_map()
	--update_camera()
 --camera(pl.x-64,pl.y-64)
end

-->8
--draw
function _draw()

	cls(0)
	
	update_camera()


	map(0, 0, 0, 0, 128, 32)
	draw_flipped()
	

	draw_stuff1()
	
	-- spr(pl.head,pl.x,pl.y-8,1,1,pl.mrr)
	drawplayer()
	main_pal()
-- draw_stuff2()
	if digging then dig_hud() end
	hud()

 -- Temp stuff
 if draw_drummer then  drawdm() end
 if draw_bass then drawba() end
 if draw_guitar then drawgu() end

 if debug then
	print(pa1.sel)
	print(pa2.sel)
	print(pa3.sel)
	print(pa4.sel)

	-- if onObject then print("ITEM FOUND!",5,24) end
 end
end

function draw_stuff1()
	sspr(0,16,16,8,30,20)
	spr(58,90,95)
end

function draw_flipped()
	-- 1, 11
	spr(111,1*8,9*8,1,1,false,true)
end

function dig_hud()
	dhx = pl.x-50
	dhy = pl.y-50
	color = 7
	if initDig then
		dig_cursor.x = dhx+3
		dig_cursor.y = dhy+3
		initDig = false
	end
	-- 72 for corner, 88 for regular

	
	-- corners can be put in a loop TODO
	rectfill(dhx+1,dhy+1,dhx+38,dhy+38,7)
	for i=1,4 do
		spr(75,dhx+8*i,dhy)
		spr(75,dhx+8*i,dhy+8*4+1,1,1,false,true)
		rotate(75,2,dhx+8*4+1,dhy+7*i)
		rotate(75,1,dhx,dhy+7*i)
	end
	spr(74,dhx,dhy)
	spr(74,dhx,dhy+8*4+1,1,1,false,true)
	spr(74,dhx+8*4+1,dhy,1,1,true,false)
	spr(74,dhx+8*4+1,dhy+8*4+1,1,1,true,true)
	--rectfill(dhx+1,dhy+1,dhx+8*5,dhy+8*5,8)


	draw_dig_field(pa1,dhx+3,dhy+3)
	draw_dig_field(pa2,dhx+3+19,dhy+3)
	draw_dig_field(pa3,dhx+3,dhy+3+19)
	draw_dig_field(pa4,dhx+3+19,dhy+3+19)
	-- barrier drawn, start populatie 4 fields
	
	-- c_mid = 

	if btn(4) then
		sspr(32,32,16,8,dig_cursor.x,dig_cursor.y)
		spr(84,dig_cursor.x,dig_cursor.y+8)
		spr(83,dig_cursor.x+8,dig_cursor.y+8)
		
		-- if timer(stam,.5,pl.dug) then 
		-- 	stam.val -=.01 
		-- 	pa2.val+=.3
		-- end
	else 
		sspr(16,32,16,16,dig_cursor.x,dig_cursor.y)
	end

	dig_bar(pl.x-29,pl.y-2)
	-- sspr(48,32,16,8,pl.x-20,pl.y+1)
	-- sspr(48,32,16,8,pl.x-36,pl.y+1,16,8,true)
	
	
	

	-- draw 4 quadrants
	--draw_digging()

end

-- 86, 87
function dig_bar(mid,top)

	for i=4,1, -1 do
		rectfill(mid-i*3.5,top-1,mid+i*3.5,top-5,12-i)
	end
	sspr(64,32,16,8,mid,top-5)
	sspr(64,32,16,8,mid-15,top-5,16,8,true)
	arrow_ctrl(mid-17,top-10)

end

function arrow_ctrl(left,top)
	if initArrow then 
		arrow.x=left
		arrow.y = top
		initArrow = false
	end
	if (arrow.x > left+28) or (arrow.x < left-2) then
		arrow.spd = arrow.spd*-1
	end
	if not btn(4) then
		arrow.x += arrow.spd
		
	
	end

	spr(85,arrow.x,arrow.y)

end

function dig_points()
	points = 0
	mid = pl.x-29
	--perfect hit
	if abs(arrow.x - mid) < 2 then
		return 5
	elseif abs(arrow.x-mid) < 5 then
		return .5
	else return .1 end
end

function canDig()
	
end

function on_tile()
	return fget(mget(flr(pl.x/8),flr(pl.y/8)))
end

--def: 65, 82.mirror, 81,82
function draw_dig_field(type,qx,qy)
	if btn(4) then
		-- sspr(32,32,16,8,dig_cursor.x,dig_cursor.y)
		-- spr(84,dig_cursor.x,dig_cursor.y+8)
		-- spr(83,dig_cursor.x+8,dig_cursor.y+8)
		
		if type.sel == true then
			if timer(stam,.5,pl.dug) then 
				stam.val -=.01 
				type.val+=.5+dig_points()
			end
		end
	-- else 
	-- 	sspr(16,32,16,16,dig_cursor.x,dig_cursor.y)
	end
	
	
	if (type.val >=0) and (type.val < 3) then
		spr(80,qx,qy)
		spr(80,qx+8,qy,1,1,true,true)
		spr(80,qx,qy+8)
		spr(80,qx+8,qy+8)
		
		if type.val >= .7 then
			spr(70,qx,qy)
			if type.val > 1.5 then
				spr(70,qx+8,qy+8,1,1,true,true)
				spr(71,qx+8,qy)
			end
			if type.val > 1.8 then
				spr(71,qx,qy+8,1,1,true,true)
			end

		end


	else 
		spr(65,qx,qy+8)
		spr(65,qx,qy,1,1,false,true)
		spr(65,qx+8,qy,1,1,true,true)
		spr(65,qx+8,qy+8,1,1,true,false)
		-- spr(80,qx,qy+8)
		-- spr(80,qx+8,qy+8)
	end
	
end

--move this function TODO
	function rotate(sprite,mode,dx,dy,w,h)
		local sx=sprite%16*8
		local sy=flr(sprite/16)*8
		w,h=w or 1,h or 1
		w,h=w*8-1,h*8-1
		local ya,yb,xa,xb=0,1,0,1
		if mode==0 then
		 ya,yb=h,-1
		elseif mode==1 then
		 xa,xb=w,-1
		elseif mode==2 then
		 ya,yb,xa,xb=h,-1,w,-1
		end
		for y=0,h do
		 for x=0,w do
		  pset((y-ya)*yb+dx,(x-xa)*xb+dy,sget(x+sx,y+sy))
		 end
		end
	   end


function hud() --testing dia
	top = cy+112
	bot = cy+128
	-- temp
	spr(72,cx+3,cy+118,2,1,true,true)
	spr(72,cx+19,cy+118,2,1,false,true)
	rectfill(cx+4,cy+121,cx+4+stam.val*29,cy+124,8)
	
	-- rotate(72,1,cx,cy)

	-- rectfill(cx,top,cx+128,bot,5)
	-- rect(cx,top,cx+127,bot-1,6)

	-- if onObject then
	-- 	start_dig()
	-- end

	-- -- det light TODO: link with timer
	-- if timer(light,light.interval,light.sw) then
	-- 	rectfill(cx+10,top-2,cx+13,top-1,8)
	-- else
	-- 	rectfill(cx+10,top-2,cx+13,top-1,134 / -10)
	-- end

	-- -- signal
	
	-- rectfill(cx+2,top+2,cx+40,bot-3,3)
	-- line(cx+3,top+3,cx+38,bot-5, 13)

	-- if listen then 
	-- 	-- transition to dialog box
	-- 	rect(cx+1,cy+80,cx+126,cy+126,14)
	-- end

end

dig_bary=cy+128

function start_dig()
	if dig_bary > cy+16 then
		dig_bary -= 5
		print(dig_bary,cx,cy,0)
	else
		dig_bary = cy+16
	end
	rectfill(cx+104,dig_bary,cx+125,cy+112,2)
	rect(cx+104,dig_bary,cx+125,cy+112,6)
	
end

function stop_dig()
	if dig_bary < cy+16 then
		dig_bary += 5
		
	else
		dig_bary = cy+128
	end
	rectfill(cx+104,dig_bary,cx+125,cy+112,2)
	rect(cx+104,dig_bary,cx+125,cy+112,6)
end

function dia(str)
	-- short anim for popup
	-- if player in lower half of screen, draw dialogue in upper half.	
end




 



-->8
--player

--player variables
pl={}
pl.x=50--start pos
pl.y=50--start pos
pl.head=1
pl.bod=2
pl.det=0
pl.dir=false
pl.mvg=false
pl.mrr=false
pl.search=false
pl.cdir=false
pl.srch=false
pl.w=16
pl.h=16
pl.dx=0
pl.dy=0
pl.dug=false
pl.dug_timer=-1

det={}
det.x=pl.x-8
det.y=pl.y
det.spr=0
det.et=time()
det.incycle=false
det.timer=-1
det.sw=false

t1 = -1

function move_pl()
  
  map_tile = mget(flr(pl.x/8),flr(pl.y/8))
  flag_tile=fget(map_tile)
  t=pl.mrr
  pl.dx=0
  pl.dy=0
  if digging then 
	dig_hud() 
	dig_nav() 
end

  if btn(4) and not digging then
  	pl.srch=true
  	pl.mvg=false


	if btn(5) then
		initArrow = true
		digging=true
		pl.srch=false
	end

	elseif digging then
		-- dig_hud()
		pl.srch=false
		if btn(5) and not btn(4) then 
			digging = false
			initDig = true
		 end
	
  else pl.srch=false 

	if btn(5) then
		if onObject then
			start_dig()
		else
			stop_dig()
			act()
		end
		pl.mvg=false

	
	elseif btn(0) then	
		pl.dx = -1*spd
		pl.mrr=false
	
	elseif btn(1) then
		pl.dx = 1*spd
		if (pl.mrr==false) then 
			pl.cdir=false
		end
		pl.mrr=true
		
	elseif btn(2) then
		pl.dy = -1*spd

	elseif btn(3) then
		pl.dy = 1*spd
	end
end

  if hit(pl.x+pl.dx,pl.y,7,7) then
	pl.dx=0
  end

  if hit(pl.x,pl.y+pl.dy,7,7) then
	pl.dy=0
  end

  if pl.dx == 0 and pl.dy == 0 then 
	pl.mvg = false
  else pl.mvg = true end
  
  pl.x+=pl.dx
  pl.y+=pl.dy
  if pl.srch then 
	mvdet(5,3)
	
  else
	retdet()
  end

  
  
  if pl.mrr != t then
  	if pl.mrr then
  	 det.x=pl.x+8
  	else 
  			det.x=pl.x-8
  	end
  end



end

function act()
 if dstf(pl,ba) < 55 then
  baact()
 end

end


function anim_pl()
	if (pl.mvg) then
		if(pl.bod==2) then
			pl.bod=3
	 elseif(pl.bod==3) then
			pl.bod=4
		elseif(pl.bod==4) then
			pl.bod=2
		end
 	else
			pl.bod=2
	end
end
		
function mvdet(spd,rad)
		i=1
		j=1
		if pl.mrr then
			if dst(pl.x,det.x-2) > rad then
					i=-1				
			end
		else 
		 if dst(pl.x,det.x+10) > rad then
				i=-1
		end
end
  if timer(det,.3,det.sw) then
	det.x+=i*rad
	sfx(0,1)
	end 
end

-- returns metal detector to player.
function retdet()
 det.y=pl.y
 if pl.mrr then det.x=pl.x+8
 else det.x=pl.x-8
 end
end



function hit(x,y,w,h)
	collide=false
	for i=x,x+w,w do
		if fget(mget(i/8,y/8)) ==2 or
			fget(mget(i/8,(y+h)/8))==2 then
				collide=true
		end
	end
	return collide
end

function drawplayer()
	spr(pl.head,pl.x,pl.y-8,1,1,pl.mrr)
 if(pl.mvg==true)then 
		anim(pl,2,3,3,0,0,pl.mrr)
		anim(det,0,1,3,0,0,pl.mrr)
	else
 	spr(pl.bod,pl.x,pl.y,1,1,pl.mrr)
 	spr(det.spr,det.x,pl.y,1,1,pl.mrr)
 end

end

function dig_nav()
	if btn(0) and (dig_cursor.x > dhx+5) then
		dig_cursor.x -= 19
		dig_nav_l = true
	end
	if btn(1) and (dig_cursor.x < dhx+10) then
		dig_cursor.x += 19
		dig_nav_l = false
	end
	if btn(3) and (dig_cursor.y < dhy+5) then
		dig_cursor.y += 19
		dig_nav_t = false
	end
	if btn(2) and (dig_cursor.y > dhy+10) then
		dig_cursor.y -= 19
		dig_nav_t = true
	end

	pa1.sel=false 
	pa2.sel=false
	pa3.sel=false
	pa4.sel=false
	if dig_nav_l == true then
		if dig_nav_t == true then 
			pa1.sel=true 
		else pa3.sel=true end
	else 
		if dig_nav_t == true then pa2.sel=true
		else pa4.sel= true end
	end
	
end


-->8
--anim
  --object,start,#frames,speed, flip
function anim(o,sf,nf,sp,offx,offy,fl)
  if(not o.a_ct) o.a_ct=0
  if(not o.a_st) o.a_st=0

  o.a_ct+=1

  if(o.a_ct%(30/sp)==0) then
    o.a_st+=1
    if(o.a_st==nf) o.a_st=0
  end

  o.a_fr=sf+o.a_st
  spr(o.a_fr,o.x+offx,o.y+offy,1,1,fl)
end
-->8
--util

function box_hit(x1,y1,w1,h1,x2,y2,w2,h2)
	local hit=false

	local xs = w1*.5+w2*.5
	local ys = h1*.5+h2*.5
	local xd = abs((x1+(w1/2))-x2+(w2/2))
	local yd = abs((y1+(h1/2))-y2+(h2/2))

	if xd<xs and yd<ys then
		hit=true
	end
	return hit
end

--random int between l,h
function rndb(l,h) --exclusive
    return rnd(h-l)+l
end

function dst(a,b)
	return abs(a-b)
end

--return current gt with added time
function timer(obj,c,sw)

	
	if obj.timer==-1 then
		obj.timer=time()	
		return false
	end
	
	if obj.timer+c < time() then
		obj.timer=-1
		sw = not sw
		_d+=1
		return true
	end
	return false
end

function sqr(x) return x*x end

function dstf(a,b)
 return sqrt(sqr(a.x-b.x) + sqr(a.y-b.y))
 end
 
function disptxt()
 if timer(txt,3) then
  txt.t="i lost my special coin!"
 end
end
-->8
--band

--drummer
dr={}
dr.spr=8
dr.x=60
dr.y=20
dr.sc=5
dr.an=false
dr.timer=-1
dr.sw=false

function drawdm()
	 animdr()
	 spr(dr.spr+3,dr.x,dr.y+8)	 
	 spr(dr.spr+4,dr.x+8,dr.y+8)	 
	 spr(dr.spr+3,dr.x+16,dr.y+8,1,1,true)	 
end

function animdr()
  
 if timer(dr,rndb(.01,.7),dr.sw) then 
  dr.sw = not dr.sw
 end
 if dr.sw then
 	spr(dr.spr,dr.x,dr.y)
 	spr(dr.spr+1,dr.x+8,dr.y)
 	spr(dr.spr+2,dr.x+16,dr.y)
 else
 	spr(dr.spr+2,dr.x,dr.y,1,1,true)
 	spr(dr.spr+1,dr.x+8,dr.y,1,1,true)
  spr(dr.spr,dr.x+16,dr.y,1,1,true)
 end
end
	
--bass
ba={}
ba.spr=16
ba.x=80
ba.y=80
ba.sc=5
ba.an=true
ba.timer=-1
ba.sw=false
ba.w = 8
ba.h=16

function drawba()
	animba()
	spr(ba.spr,ba.x,ba.y) -- head
	spr(ba.spr+1,ba.x+8,ba.y)
	spr(ba.spr+6,ba.x,ba.y+16)--bass body
 spr(ba.spr+7,ba.x+8,ba.y+16)

end
	
function animba()
  anim(ba,18,2,1,0,8,false)
  anim(ba,20,2,1,8,8,false)
end

function baact()
	disptxt()
end

--guitar
gu={}
gu.spr=24
gu.x=10
gu.y=10
gu.sc=5
gu.an=true
gu.timer=-1
gu.sw=false

function drawgu()
	animgu()
	spr(gu.spr,gu.x,gu.y) -- head
end

function animgu()
  anim(gu,25,2,.5,8,0,false)
  anim(gu,27,2,.5,0,8,false)
  anim(gu,29,2,.5,8,8,false)
end

-->8
--camera/map: finds current map quadrant
function update_map()
	mx=flr(pl.x/128)*16+1/16
	my=flr(pl.y/128)*16+1/16
end

function update_camera()
 cx_diff=mx*8-cx
 cy_diff=my*8-cy
 
 if (abs(cx_diff)<0.1) cx_diff=0
 if (abs(cy_diff)<0.1) cy_diff=0
  
 cx_diff*=tran_spd
 cy_diff*=tran_spd
 cx+=cx_diff
 cy+=cy_diff
 
 camera(cx,cy)
end

function rrectfill(x0, y0, x1, y1, col, corners)
	local tl = corners and corners.tl
	local tr = corners and corners.tr
	local bl = corners and corners.bl
	local br = corners and corners.br
  
	local new_x0 = x0 + max(tl, bl)
	local new_y0 = y0 + max(tl, tr)
	local new_x1 = x1 - max(tr, br)
	local new_y1 = y1 - max(bl, br)
  
	rectfill(new_x0, new_y0, new_x1, new_y1, col)
  
	if tl and tl>0 then
	  circfill(new_x0, new_y0, tl, col)
	end
	if tr and tr>0 then
	  circfill(new_x1, new_y0, tr, col)
	end
	if bl and bl>0 then
	  circfill(new_x0, new_y1, bl, col)
	end
	if br and br>0 then
	  circfill(new_x1, new_y1, br, col)
	end
  
	-- draw top rect
	rectfill(new_x0, y0, new_x1, new_y0, col)
  
	-- draw left rect
	rectfill(x0, new_y0, new_x0, new_y1, col)
  
	-- draw right rect
	rectfill(new_x1, new_y0, x1, new_y1, col)
  
	-- draw bottom rect
	rectfill(new_x0, new_y1, new_x1, y1, col)
  end

__gfx__
00000000000dd00000111ff10011111100111ff10011110000000000000000000000000006666620012222100000000000000010221444562214445655500000
00000dd000d11d0001111eef01111ff101111eef01111110000000000000000000000000022222210621126001111010011111002214ff5522144555fff50000
0000ff000d1111d01111111001111eef111111100ff11ff00000000000ffff00000000000222662122166122111ff110111ff000222eef542224ff54ff1f5000
0000eef1dd1171dd00111110101111100011111001e11e109909000001fff1f00400900000662261216666121fffff001fff1f000222444d022eef4d1fff5000
0000d0000d1e11d000100010000111000000111005555550009904000e1f1ef0049999990022220021666612e11f11f01f1fe1f0055111dd055111ddfffe0000
000d000000eeff0000110011000115500001101155111155010099400eeefff0ff0000100000010022166122eeefeef0e1effff0055511d0055511d0eee10000
06ddd6000000ef0000050005000050500005000505066050100000ff00eeef00e000000100000010062112600eee1ff00eee1ff00500510005005100ff111000
6666600000011110055505550055505005550555ee6006ef1000666e0011110006660001000001111022220122eeef2022eeef4405005ddd05005dddeee11000
0011000000000000000220000002220000110000041541400000500000022000000e5f0000022000221221fe0000000000000000422000008888800011111000
011110000000000000022200000244000111100001454410000e5f0000222200000552200022220022122fe20000000000000000410000008888800011110000
00111110000000000022220000044400001111104445444400054220002222000005402200222200222212220000000000000000411000001888800022220000
0000011ff000000000222220000444000000011f44466444004544220202222000454402220222200eff22210000140000001400110000001888800022220000
000000ee1f0000000ff2222000044000000410ee444444440444544220022220044454400022222001111d110006410000064100000000000888800000220000
0000001eeef000000e222220000440000014401e04455440044454400022222004445440222022200511dd1000f6000000ff0000000000000888800000020000
0000000eeeef000000f22220000440000000500e00455400004454ff222222200044ff22000222200501d5000ee0000006e20000000000000003000000030000
00000000000e20000ee22200ddd555dd000050000000500000154ee000022200001ee10000022200050dddd06620000066220000000000000003300000033000
0af1f0000000000000000000000550000014410000000000000001400000e0000022220000144100090000900088000090009000000000000000000000000000
afffff000000000000000000fff5500000044000000000000000144a0099e9900266662000066000999009990878880090909499099999000000000000000000
af1ffff0000000000000000ff1fff000001aa10000000000000044a1099999992666666200466400100000018787878040904000097799000000000000000000
affff1f000000000000000fffe1fff00000660000000000000005a1000eee99032666623044664401600006122557880004004990eeeee000000000000000000
feffffef1100ff0000000ff1ffffff0000066000000000044445000000991111162222630a4554a0621221260052220090009000000997990000000000000000
0fefeeff111f00f000002f1ffff1f0000006600000000044445400009999e9901266662044444444262662620055000090909499000979990000000000000000
0fefffff111000ef00022ee1ff1e55000006600000000044454400000eee999913222231a444444a032662300005500040904000000eeeee0000000000000000
0feefeff111ffffe002212eeeee05500004664000044141454440000011119e0001111100aaaaaa010122101000aa00000400499000000000000000000000000
006666000008000000221ff200000000044664400444414544440000002222000000040000144100e000000e00000000000006600000dd6d0000000000000000
088888800080080002211efe000000000446644004444454144a0000061111600264464000a55a004e0000e40000660006600d60000d7d160000000000000000
0888888000808000022112ee0000000f0a4334a0044445414aa00000216666122646446204454440e030030e0000d6000d66d00000d7771d0000000000000000
088777700808000802222222000000ff04455440044654441000000021666612326466230a1451a00e0ee0e000dd0990000d66600d78c77d0000000000000000
07777870080808800111111000000f1f44444444044464444000000026111162362222610144541000eeee00009d0e9006d00d60d77987d00000000000000000
08888880808080000011110000002ff1a444444a05544444a00000003d2222d3026666214466664400044000090000900d606d00d1777d000000000000000000
02222880080800880001100000022e1e0a4444a0055aaaaa000000001133331113222231a455554a0e4004e0000009900066d6006117d0000000000000000000
006666000080880005555550002212ee00aaaa00500000000000000001dddd10011111000aaa5aa00e0000e00000000000dd0000d6dd00000000000000000000
bbbbbbbbb35bbbbb0000000000000000000000000000000000000000000000003333333333333330003333333333333300000000000000000000000000000000
bbbbbbb7b35bbbbb000003333000000000000000000000000000000000000000000000000000000303dddddddddddddd00000000000000000000000000000000
bbbbbbb77b35bbbb00033f3ef30000000000000000000000000000000030000000000000000000033d7777777777777700000000000000000000000000000000
bbb7bb777b35bbbb003f3ef3ef3000000000003333300000000000000300000000000000000000033d7777777777777700000000000000000000000000000000
bbbbb77777b355bb003ef3ef3ef30000000033ef3ef30000000003000030003000000000000000033d7777777777777700000000000000000000000000000000
bbbb777b775b335503f3ef3ef3ef30000003ef3ef3ef3000000003000030330033333333333333303d7777777777777700000000000000000000000000000000
bbb7777b7575bb3303ef3ef3effff30000033ef3effff300000030300303000000000000000000003d7777777777777700000000000000000000000000000000
b77777bb777777bb003ef3effffff300003ef3effffff300000000033000000000000000000000003d7777777777777700000000000000000000000000000000
777777bb7b55b5b70003effffffff3000033efff000000000003333333333300b773333333333333333337bb0333333333333333aaaaaaaaaaaaaaaa55b5aa5a
7777bbbbb533335b003f3efffffff30000033eff0000000000399d99d99d9930bb33555555335355555533b7355b55555555b55baa55555a55a5a55555b5a55a
77bbbbbb53355335003ef3effffff3000003f3ef0000000000399d99d99d99307335555555535555b55353373bb5555555bb5555a5a55a5a5555a55a55b5a55a
bbbbbb7b535bb53b0003eeeefffff3000003eeee0333333303399d99d99d99303355555555555555355555333555b55bbb55555ba55aaaaaaaaaaaaa55b5aaaa
bbbbbbbbb3b77b350000333eeeee30000000333e0037773003399d99d99d993035355bb5bbb55bbb55b55553355b55b5555555b5a55a55555555555555b5a55a
bbbbbbbb535555350000000333330000000000030003730000399d99d99d99303555bb5bb55bb55bbb5b55533bbbbbbbbbbbbbbbaa5a5bbbbbbbbbbb55b5a5aa
bbbb7bbbb533335b0000000000000000000000000000300000399d99d99d99303555b55555555555555bb5530333333333333333a55a5b555555555555b5a55a
bbb777bb775b55b7000000000000000000000000000000000003333333333300355b5555555555555555bb530033000000033000aaaa5b555555555555b5a55a
bbbb777777777b7bb77777bbbbbbbbbbb7bbbbbbb777777b5555555555555555355b5555bbb777775555b553bbbbbbbbbbbbbbbba5aa5b55aaaaaaaa33333333
bbb77777777777bb5bbbbb555bbbbb557b5bbb555bbbb5b7553b555555555555355b5b35bb7b777753b5b553bbbbbbbbbbbbbbbba55a5b55abafbafb88888883
bb777777777777bbc55555ccc55555ccb5c555ccc5555c5b5555555555b55535335b5555b7b777775555b533bbbbbbbbbbbbbbbba55a5b55abafbafb22888783
b7b7777777777bbbcccc77777cccccccb5cc77777ccccc5b5555b55bbbbb55b53335b555bb7b7777555b5333abbbbbbbbbbbbbbaaaaa5b55abafbafb28888883
7777777777777bbb77777ccc77ccccc7b5777ccc77cccc5b555b5bb55555b5553355b555b7b77777555b5533bbbbbabbbbbbbbbba55a5b55abafbafb88878883
777777777777bbbb77ccccccc7777777b5ccccccc777775b55bb5555535b5555355bb555bb7b7777555bb553fffffaafffffffffaa5a5b55abafbafb88788883
b77777777777bbb7cc7ccccccccc7ccc7b5ccccccccc75b7555b5353355b555535bb5555bbb7b7775555bb53aaaaaaaaaaaaaaaaa55a5b55abafbafb78888283
77777777777bbbb7cccc7ccccccccccc7b5c7cccccccc5b7555b55333355b55535b55555aaaa7b7755555b53bbbbbbbbbbbbbbbba55a5b55abafbafb87882283
77777777777bbbb7ccccccccccccccccb5cccccccccccc5b555b55333355b55535bb55555555555555555b53bbbbbbbbbbbbbbbb55b5a55a5555555587822283
7777777777bbbb77cc777777ccc7cccc7b577777ccc7c5b75555b5533535b555355bb5555555555553555b53bbbbbbbbbbbbbbbb55b5aa555555555587822283
777777777bbbb7b7777c77777ccccccc7b5c77777cccc5b75555b5355555bb553555b5bbb55bb55b555bb553bbbaabbbbbbbbbbb55b5a555bbbbbbbb87822283
7777777bbbbbb77777c7ccc777c777777b57ccc777c775b7555b55555bb5b55535555b55bbb55bbbbbb55353bbbbbbbbbbbbbbbb55b5aaaa5555555587822283
77777bbbbbbb7777ccccc7cc7777c77c7b5cc7cc7777c5b75b55bbbbb55b555533555553555555555b555533bbbbbbbbbbbbbbbb55b55555aaaaaaaa87822283
777bbbbbbb777777ccccccccccc77ccc7b5cccccccc775b753555b55555555557335355b5553555555555337ffffffffffaaafff55bbbbbb5555a55a87822283
7bbbbbbbb777777bcc7cccccccccccccb5cccccccccccc5b555555555555b3557b33555555335355555533bbaaaaaaaaaaaaaaaa5555555555a5a55587822283
bbbbbb7777777777ccccccccccccccccb5cccccccccccc5b5555555555555555bb733333333333333333377bbbbbbbbaabbbbbbb55555555aaaaaaaa87822283
__gff__
0000000000000000000000000100000000000000000001000000000000000000020000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000002020200000000000000020202020202020202000000000200000000000000000202020000000002
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
6679797979797979797979797979796766797967667979790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6a6061606160616061606160616061686a6061787a6061606100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6a7071707170717071707170717071686a707170717071707100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6a6061606160616061606160616061686a606160616061606100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6a6f71707170717071707170717071686a707170717071707100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6a7f6d606160616061606160616061686a606160616061606100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6a7f6e707170717071707170717071787a707170717071707100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6a7f6e6061606160616061606160616061606160616061606100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6a7f6d7071707170717071707170717071707170717071707100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
686f616061606160616061606160616061606160616061606100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7a70717071707170717071707170717071707170717071707100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6362636263626362636265606160616062000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7372737273727372737375707170717072000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7273727372737273727373626362636272736364000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020202020202020200020202000200020000020002000200020000020002000202020202020
7273727372737273727372737273727273727374000000000000000000000000000000000000000000000000000000202000000000000000000000000000002020202020202020202020202020202020202020202020202020202020202020002000202020002020002020202020202020202020202020202020202020202020
7273727372737273727372737272737273727320202020202020202000200020200020200020002000200020002020202020202020202020202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020
7273727372737273727372737273727372737200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020
7273727372737273727372737273727273727300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020
7273727372737273727372737273720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020
0000620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020
0000620000000000000000004141434141414141414100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020
0000620000000000000000414141414141414141414141414100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020
0000620000000000000000000041414141434141434141414100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020
0000620000000000000000000041414141414141414141410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020
0000620000000000000000000000004141414141414141000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020
0000620000000000000000000000000000414100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020
0000620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020
0061626162616261626162616261620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020
0071727172717271727172717271720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020
0000620000000066760000616261620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020
0000620000000076000000717271720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020
6566656620202020202020200061620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020
__sfx__
000a0000205002d75027750225001e500060003370009700097000970009700097000870008700087000870008700087000870007700067000470002700007000000000000000000000000000000000000000000
001000000705009050060000b0500c050070000505003050070000700007000080500b050100501d3000710006100061000510005100051000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000002405000000000000000000000000000000023050000000000030050260503005030050300500000030050300501a0501a0501f0502505032050000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021050000000000000000
__music__
04 41424344

